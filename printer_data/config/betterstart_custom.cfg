[gcode_macro _START_END_PARAMS]
# this value is multiplied by the target temp to give wait time in seconds
variable_bed_warp_wait_multiplier: 8.0
# how far below target temp can the bed be to do fractional wait times
variable_bed_warp_fraction_wait: 0.75
# how long to wait each loop before displaying a status message
variable_bed_warp_wait_interval: 15
gcode:

[gcode_macro _CLIENT_VARIABLE]
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_custom_park_dz   : 3.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
gcode:

[virtual_pins]
[output_pin Bed_Warp_Stabilisation]
pin: virtual_pin:BED_WARP_STABILISE_pin
value: 0

[idle_timeout]
timeout: 3600
gcode:
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=command MSG='Printer is paused, timeout bypassed'
    {% else %}
        RESPOND TYPE=command MSG='Timeout Reached - Turning off heaters and motors'
        TURN_OFF_HEATERS
        M84
    {% endif %}


#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  #{% set target_bed = params.BED|int %}
  {% set BED_TEMP=params.BED_TEMP|default(65)|float %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
  {% set current_bed_temp = printer.heater_bed.temperature %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  STATUS_HOMING                                         # Set LEDs to homing-mode
  #LIGHT_ON
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  M190 S{BED_TEMP}  # wait for bed temperature before next step

    {% if bed_warp_stabilisation %}
       {% if current_bed_temp < (BED_TEMP * 0.99) %}
            _WARP_STABILISE TARGET_TEMP={BED_TEMP} CURRENT_TEMP={current_bed_temp}
        {% else %}
            RESPOND TYPE=command MSG='Skipping bed warp stabilisation as bed already at {current_bed_temp}c'
        {% endif %}
    {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                    # Display info on display
  M109 S150                                             # Heat hotend to 150c
  clean_nozzle
  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  G28 Z                                                # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  #SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  #QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  #G28 Z                                                # Home Z again after QGL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  #BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
  BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5
  

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                                # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING
  clean_nozzle                                       # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position
  SFS_ENABLE
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    SFS_DISABLE
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    
    _CLIENT_RETRACT
    {% if bed_warp_stabilisation %}
        RESPOND TYPE=command MSG='Heatbed waiting for next print'
        M104 S0  # Turning off the nozzle
    {% else %}
        TURN_OFF_HEATERS
    {% endif %}

  
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    clean_nozzle
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    _TOOLHEAD_PARK_PAUSE_CANCEL

    M84  # motors off

    M117 Printing complete.
    M107                                     ; turn off fan
    #BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro _WARP_STABILISE]
description: "Performs bed warp stabilisation based on the current bed temperature. Adjusts stabilisation time according to the bed temperature."
gcode:
    {% set multiplier = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_multiplier|float %}
    {% set interval = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_interval|int %}
    {% set partial = printer["gcode_macro _START_END_PARAMS"].bed_warp_fraction_wait|float %}

    {% set current_temp = params.CURRENT_TEMP|float %}
    {% set target_temp = params.TARGET_TEMP|float %}

    # if current temp is already pretty high, we only need to do a fraction of heat soaking
    {% if current_temp > (target_temp * partial) %}
        {% set total_time = ((target_temp - current_temp) * multiplier)|int %}
    {% else %}
        # 100c will be 13minutes approx heat time, 65c will be 8.5 minutes preheat, etc.
        {% set total_time = (target_temp * multiplier)|int %}
    {% endif %}

    SET_DISPLAY_TEXT MSG='Bed Warp Stabilisation starting with a total time of {total_time} seconds...'
    
    {% set loops = (total_time / interval)|int %}   
    {% for i in range(loops) %}
      {% set time_remaining = total_time - (i + 1) * interval %}
      SET_DISPLAY_TEXT MSG='Bed Warp Stabilization { time_remaining } seconds remaining'
      {% if time_remaining < interval %}
        G4 P{ time_remaining * 1000 }  # Wait for the interval time in milliseconds
      {% else %}
        G4 P{ interval * 1000 }  # Wait for the interval time in milliseconds
      {% endif %}
    {% endfor %}

    SET_DISPLAY_TEXT MSG=='Warp Stabilisation complete!'
